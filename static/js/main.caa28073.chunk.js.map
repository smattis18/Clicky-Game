{"version":3,"sources":["components/Wrapper/index.js","components/Navbar/index.js","components/Header/index.js","components/Main/index.js","components/Images/index.js","components/Footer/index.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","react_default","a","createElement","className","children","Navbar","result","score","Header","id","Main","Images","src","image","alt","name","Footer","App","state","puppies","components_Wrapper","components_Navbar","components_Header","components_Main","this","map","puppy","components_Images","components_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0kCAOeA,MAJf,SAAiBC,GACf,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMK,iBCW1BC,MAZf,SAAgBN,GACd,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,+BACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAb,eACAH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,eAAeJ,EAAMO,QACrCN,EAAAC,EAAAC,cAAA,QAAMC,UAAU,eAAeJ,EAAMQ,gBCG9BC,MATf,SAAgBT,GACd,OACEC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,kCAChBH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAaM,GAAG,aAA9B,gBACAT,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAd,oFCMSO,MAVf,SAAcX,GACZ,OACEC,EAAAC,EAAAC,cAAA,QAAMC,UAAU,6BACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACZJ,EAAMK,SADT,aCGSO,MANf,SAAgBZ,GACd,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BAA0BS,IAAKb,EAAMc,MAAOC,IAAKf,EAAMgB,cCO3DC,MATf,SAAgBjB,GACd,OACEC,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,QAAMO,GAAG,aAAT,eACAT,EAAAC,EAAAC,cAAA,OAAKO,GAAG,WAAWG,IAAI,mBAAmBE,IAAI,mBC8BrCG,6MA1BbC,MAAQ,CACNC,mFAIA,OACEnB,EAAAC,EAAAC,cAACkB,EAAD,KACEpB,EAAAC,EAAAC,cAACmB,EAAD,CACEf,OAAQ,2BACRC,MAAO,wBAETP,EAAAC,EAAAC,cAACoB,EAAD,MACAtB,EAAAC,EAAAC,cAACqB,EAAD,KACCC,KAAKN,MAAMC,QAAQM,IAAI,SAAAC,GAAK,OACnB1B,EAAAC,EAAAC,cAACyB,EAAD,CACEd,MAAOa,EAAMb,MACbE,KAAMW,EAAMX,UAIxBf,EAAAC,EAAAC,cAAC0B,EAAD,cAtBUC,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpC,EAAAC,EAAAC,cAACmC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.caa28073.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n  return <div className=\"wrapper\">{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Navbar(props) {\r\n  return (\r\n    <nav className=\"navbar shadow-lg sticky-top\">\r\n      <div className=\"container\">\r\n        <a className=\"navbar-brand\">Clicky Game</a>\r\n        <span className=\"navbar-text\">{props.result}</span>\r\n        <span className=\"navbar-text\">{props.score}</span>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Navbar;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Header(props) {\r\n  return (\r\n    <header className=\"jumbotron jumbotron-fluid mb-1\">\r\n      <h1 className=\"hdr-center\" id=\"hdr-title\">Clicky Game!</h1>\r\n      <h3 className=\"hdr-center\">Click on an image to earn points, but don't click on any more than once!</h3>        \r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Main(props) {\r\n  return (\r\n    <main className=\"jumbotron jumbotron-fluid\">\r\n      <div className=\"container\">\r\n        {props.children};\r\n      </div>\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default Main;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Images(props) {\r\n  return (\r\n    <img className=\"gallery shadow p-2 zoom\" src={props.image} alt={props.name} />\r\n  );\r\n}\r\n\r\nexport default Images;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Footer(props) {\r\n  return (\r\n    <footer>\r\n      <span id=\"foot-text\">Clicky Game</span>\r\n      <img id=\"foot-img\" src=\"/images/logo.svg\" alt=\"react\" />\r\n    </footer>\r\n  );\r\n}\r\n\r\nexport default Footer;","import React, { Component } from 'react';\nimport Wrapper from './components/Wrapper';\nimport Navbar from './components/Navbar';\nimport Header from './components/Header';\nimport Main from './components/Main';\nimport Images from './components/Images';\nimport Footer from './components/Footer';\nimport puppies from \"./puppies.json\";\n  \nclass App extends Component {\n    // Setting this.state.puppies to the puppies json array\n  state = {\n    puppies\n  };\n\n  render() {\n    return (\n      <Wrapper>\n        <Navbar\n          result={\"Click an image to begin!\"}\n          score={\"Score: | Top Score:\"}\n        />\n        <Header />\n        <Main>\n        {this.state.puppies.map(puppy=> (\n                  <Images\n                    image={puppy.image}\n                    name={puppy.name}\n                  />\n                ))}\n        </Main>\n        <Footer />\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}